trigger:
- main
- develop

pool:
  vmImage: 'windows-latest'

stages:
- stage: Build
  displayName: 'Build application'
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: true
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        dotnet build $(Build.SourcesDirectory)\BlazorHelloWorld.csproj -c Release
      displayName: 'Build Blazor app'

    - script: |
        dotnet publish $(Build.SourcesDirectory)\BlazorHelloWorld.csproj -c Release -o $(Build.ArtifactStagingDirectory)/publish
      displayName: 'Publish Blazor app'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployToDev
  displayName: 'Deploy to Dev Environment'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  jobs:
  - deployment: DeployToDev
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure subscription 1'
              appType: 'webAppWindows'
              appName: 'AzureDevOpsShuaDev'
              runtimeStack: 'DOTNET|8.0'
              package: '$(System.ArtifactsDirectory)/drop'

- stage: DeployToLive
  displayName: 'Deploy to Live Environment'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
  - deployment: DeployToLive
    environment: 'Live'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure subscription 1'
              appType: 'webAppWindows'
              appName: 'AzureDevOpsShua'
              runtimeStack: 'DOTNET|8.0'
              package: '$(System.ArtifactsDirectory)/drop'

- stage: NotifySlack
  displayName: 'Notify Slack'
  condition: always() # 이 stage는 항상 실행되도록 설정
  jobs:
  - job: Notify
    steps:
    - bash: |
        if [ "$(Build.Reason)" == "Manual" ] && [ "$(Build.SourceBranchName)" == "develop" ]; then
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Develop 브랜치가 성공적으로 Dev 환경에 배포되었습니다. Build: $(Build.BuildNumber)"}' https://hooks.slack.com/services/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
        elif [ "$(Agent.JobStatus)" != "Succeeded" ]; then
          curl -X POST -H 'Content-type: application/json' --data '{"text":"빌드나 배포 과정에서 문제가 발생했습니다. Build: $(Build.BuildNumber), Branch: $(Build.SourceBranchName)"}' https://hooks.slack.com/services/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
        fi
      displayName: 'Send Notification to Slack'
      condition: always()
