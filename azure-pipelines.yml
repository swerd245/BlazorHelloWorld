trigger:
- main
- develop

pool:
  vmImage: 'windows-latest'

stages:
- stage: Build
  displayName: 'Build application'
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: true
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        dotnet build $(Build.SourcesDirectory)\BlazorHelloWorld.csproj -c Release
      displayName: 'Build Blazor app'

    - script: |
        dotnet publish $(Build.SourcesDirectory)\BlazorHelloWorld.csproj -c Release -o $(Build.ArtifactStagingDirectory)/publish
      displayName: 'Publish Blazor app'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployToDev
  displayName: 'Deploy to Dev Environment'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  jobs:
  - deployment: DeployToDev
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure subscription 1'
              appType: 'webAppWindows'
              appName: 'AzureDevOpsShuaDev'
              runtimeStack: 'DOTNET|8.0'
              package: '$(System.ArtifactsDirectory)/drop'

- stage: DeployToLive
  displayName: 'Deploy to Live Environment'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
  - deployment: DeployToLive
    environment: 'Live'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure subscription 1'
              appType: 'webAppWindows'
              appName: 'AzureDevOpsShua'
              runtimeStack: 'DOTNET|8.0'
              package: '$(System.ArtifactsDirectory)/drop'

- stage: NotifySlack
  displayName: 'Notify Slack'
  condition: always()  # 이 스테이지가 항상 실행되도록 설정
  jobs:
  - job: Notify
    displayName: 'Notify Job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Slack 알림 전송 시작..."
        curl -X POST --data-urlencode "payload={\
          \"channel\": \"#my-channel-here\", \
          \"username\": \"webhookbot\", \
          \"text\": \"이 항목은 #my-channel-here에 포스트되며 webhookbot이라는 봇에서 제공됩니다. 중요한 알림이 있습니다! 자세히 알아보려면 <https://alert-system.com/alerts/1234|여기를 클릭>하세요.\", \
          \"icon_emoji\": \":ghost:\"\
        }" https://hooks.slack.com/services/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
        echo "Slack 알림 전송 완료."
      displayName: 'Send Notification to Slack'
      condition: always()
